DROP TABLE IF EXISTS "films" CASCADE;

DROP TABLE IF EXISTS "users" CASCADE;

DROP TABLE IF EXISTS "film_likes" CASCADE;

DROP TABLE IF EXISTS "films_genre" CASCADE;

DROP TABLE IF EXISTS "friendship" CASCADE;

DROP TABLE IF EXISTS "friendship_status" CASCADE;

DROP TABLE IF EXISTS "genre" CASCADE;

DROP TABLE IF EXISTS "rating" CASCADE;

CREATE TABLE IF NOT EXISTS "rating" (
  "id" integer generated by default as identity PRIMARY KEY,
  "name" varchar
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_RATING ON PUBLIC."rating" ("id");

CREATE TABLE IF NOT EXISTS "genre" (
  "id" integer generated by default as identity PRIMARY KEY,
  "name" varchar
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_GENRE ON PUBLIC."genre" ("id");


CREATE TABLE IF NOT EXISTS "friendship_status" (
  "id" integer generated by default as identity PRIMARY KEY,
  "status" varchar
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_FRSH_ST ON PUBLIC."friendship_status" ("id");

CREATE TABLE IF NOT EXISTS "films" (
  "id" integer generated by default as identity PRIMARY KEY,
  "title" varchar(50),
  "description" varchar(500),
  "release_date" date,
  "duration" long,
  "rate" integer DEFAULT 0,
  "rating_id" integer REFERENCES "rating"("id") ON DELETE RESTRICT
  );
CREATE UNIQUE INDEX IF NOT EXISTS PK_FILMS ON PUBLIC."films" ("id");

CREATE TABLE IF NOT EXISTS "films_genre" (
  "id" integer generated by default as identity PRIMARY KEY,
  "film_id" integer REFERENCES "films"("id") ON DELETE CASCADE,
  "genre_id" integer REFERENCES "genre"("id") ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_FL_GN ON PUBLIC."films_genre" ("id");

CREATE TABLE IF NOT EXISTS "users" (
  "id" integer generated by default as identity PRIMARY KEY,
  "name" varchar(20),
  "email" varchar(50),
  "login" varchar(50),
  "birthday" date
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_USERS ON PUBLIC."users" ("id");

CREATE TABLE IF NOT EXISTS "film_likes" (
  "id" integer generated by default as identity PRIMARY KEY,
  "film_id" integer REFERENCES "films"("id") ON DELETE CASCADE,
  "user_id" integer REFERENCES "users"("id") ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_FILM_LIKES ON PUBLIC."film_likes" ("id");

CREATE TABLE IF NOT EXISTS "friendship" (
  "id" integer generated by default as identity PRIMARY KEY,
  "user_id_1" integer REFERENCES "users"("id") ON DELETE CASCADE,
  "user_id_2" integer REFERENCES "users"("id") ON DELETE CASCADE,
  "status_id" integer REFERENCES "friendship_status"("id") ON DELETE RESTRICT
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_FRSH ON PUBLIC."friendship" ("id");


ALTER TABLE "films_genre" ADD FOREIGN KEY ("film_id") REFERENCES "films"("id");
ALTER TABLE "films_genre" ADD FOREIGN KEY ("genre_id") REFERENCES "genre"("id");

ALTER TABLE "films" ADD FOREIGN KEY ("rating_id") REFERENCES "rating"("id");

ALTER TABLE "film_likes" ADD FOREIGN KEY ("film_id") REFERENCES "films"("id");
ALTER TABLE "film_likes" ADD FOREIGN KEY ("user_id") REFERENCES "users"("id");

ALTER TABLE "friendship" ADD FOREIGN KEY ("user_id_1") REFERENCES "users"("id");
ALTER TABLE "friendship" ADD FOREIGN KEY ("user_id_2") REFERENCES "users"("id");
ALTER TABLE "friendship" ADD FOREIGN KEY ("status_id") REFERENCES "friendship_status"("id");