DROP TABLE IF EXISTS films CASCADE;

DROP TABLE IF EXISTS users CASCADE;

DROP TABLE IF EXISTS film_likes CASCADE;

DROP TABLE IF EXISTS films_genre CASCADE;

DROP TABLE IF EXISTS friendship CASCADE;

DROP TABLE IF EXISTS friendship_status CASCADE;

DROP TABLE IF EXISTS genre CASCADE;

DROP TABLE IF EXISTS mpa CASCADE;

CREATE TABLE IF NOT EXISTS users (
  id integer generated by default as identity PRIMARY KEY,
  name varchar(20),
  email varchar(50),
  login varchar(50),
  birthday date
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_USERS ON PUBLIC.users (id);

CREATE TABLE IF NOT EXISTS mpa (
  id integer generated by default as identity PRIMARY KEY,
  name varchar(255)
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_MPA ON PUBLIC.mpa (id);

CREATE TABLE IF NOT EXISTS genre (
  id integer generated by default as identity PRIMARY KEY,
  name varchar(255)
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_GENRE ON PUBLIC.genre (id);


CREATE TABLE IF NOT EXISTS friendship_status (
  id integer generated by default as identity PRIMARY KEY,
  status varchar(255)
);
CREATE UNIQUE INDEX IF NOT EXISTS PK_FRSH_ST ON PUBLIC.friendship_status (id);

CREATE TABLE IF NOT EXISTS films (
  id integer generated by default as identity PRIMARY KEY,
  title varchar(50),
  description varchar(500),
  release_date date,
  duration long,
  rate integer DEFAULT 0,
  mpa_id integer REFERENCES mpa(id) ON DELETE RESTRICT,
  FOREIGN KEY (mpa_id)  REFERENCES mpa(id)
  );
CREATE UNIQUE INDEX IF NOT EXISTS PK_FILMS ON PUBLIC.films (id);

CREATE TABLE IF NOT EXISTS films_genre (
  film_id integer REFERENCES films(id) ON DELETE CASCADE,
  genre_id integer REFERENCES genre(id) ON DELETE CASCADE,
  PRIMARY KEY (film_id, genre_id),
  FOREIGN KEY (film_id) REFERENCES films(id),
  FOREIGN KEY (genre_id) REFERENCES genre(id)
);

CREATE TABLE IF NOT EXISTS film_likes (
  film_id integer REFERENCES films(id) ON DELETE CASCADE,
  user_id integer REFERENCES users(id) ON DELETE CASCADE,
  PRIMARY KEY (film_id, user_id),
  FOREIGN KEY (film_id) REFERENCES films(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS friendship (
  user_id_1 integer REFERENCES users(id) ON DELETE CASCADE,
  user_id_2 integer REFERENCES users(id) ON DELETE CASCADE,
  status_id integer REFERENCES friendship_status(id) ON DELETE RESTRICT,
  PRIMARY KEY (user_id_1, user_id_2),
  FOREIGN KEY (user_id_1) REFERENCES users(id),
  FOREIGN KEY (user_id_2) REFERENCES users(id),
  FOREIGN KEY (status_id) REFERENCES friendship_status(id)
);